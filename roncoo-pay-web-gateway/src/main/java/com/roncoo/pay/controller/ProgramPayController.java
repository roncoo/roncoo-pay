package com.roncoo.pay.controller;import com.alibaba.fastjson.JSONObject;import com.roncoo.pay.common.core.exception.BizException;import com.roncoo.pay.controller.common.BaseController;import com.roncoo.pay.service.CnpPayService;import com.roncoo.pay.trade.bo.ProgramPayRequestBo;import com.roncoo.pay.trade.service.RpTradePaymentManagerService;import com.roncoo.pay.trade.utils.WeixinConfigUtil;import com.roncoo.pay.trade.vo.ProgramPayResultVo;import com.roncoo.pay.user.entity.RpUserPayConfig;import org.apache.commons.httpclient.HttpClient;import org.apache.commons.httpclient.methods.GetMethod;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.validation.BindingResult;import org.springframework.web.bind.annotation.ModelAttribute;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.ResponseBody;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;@Controller@RequestMapping(value = "/programpay")public class ProgramPayController extends BaseController {    private static final Logger logger = LoggerFactory.getLogger(ProgramPayController.class);    @Autowired    private RpTradePaymentManagerService tradePaymentManagerService;    @Autowired    private CnpPayService cnpPayService;    private static final String CONTENT_TYPE = "text/text;charset=UTF-8";    @RequestMapping("/doPay")    public void initPay(@ModelAttribute ProgramPayRequestBo programPayRequestBo, BindingResult bindingResult, HttpServletResponse httpServletResponse, HttpServletRequest httpServletRequest) {        String payResultJson = "";        try{            RpUserPayConfig rpUserPayConfig = cnpPayService.checkParamAndGetUserPayConfig(programPayRequestBo,  bindingResult, httpServletRequest);            //发起支付            ProgramPayResultVo resultVo = tradePaymentManagerService.programPay( rpUserPayConfig,  programPayRequestBo);            payResultJson = JSONObject.toJSONString(resultVo);            logger.debug("小程序--支付结果==>{}", payResultJson);        } catch (        BizException e) {            logger.error("业务异常:", e);            payResultJson = e.getMsg();        } catch (Exception e) {            logger.error("系统异常:", e);            payResultJson = "系统异常";        }        httpServletResponse.setContentType(CONTENT_TYPE);        write(httpServletResponse, payResultJson);    }    @RequestMapping("/authorize")    @ResponseBody    public String wxAuthorize(@RequestParam("code") String code) {        String authUrl = WeixinConfigUtil.xAuthUrl.replace("{APPID}", WeixinConfigUtil.xAppId).replace("{SECRET}", WeixinConfigUtil.xPartnerKey).replace("{JSCODE}", code).replace("{GRANTTYPE}", WeixinConfigUtil.xGrantType);        try {            HttpClient httpClient = new HttpClient();            GetMethod getMethod = new GetMethod(authUrl);            httpClient.executeMethod(getMethod);            String result = getMethod.getResponseBodyAsString();            logger.info("小程序code换取结果:{}", result);            return result;        } catch (IOException e) {            logger.info("获取openId失败!");            return null;        }    }}